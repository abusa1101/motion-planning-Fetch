// Generated by gencpp from file fetchit_challenge/SickCameraGoal.msg
// DO NOT EDIT!


#ifndef FETCHIT_CHALLENGE_MESSAGE_SICKCAMERAGOAL_H
#define FETCHIT_CHALLENGE_MESSAGE_SICKCAMERAGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fetchit_challenge
{
template <class ContainerAllocator>
struct SickCameraGoal_
{
  typedef SickCameraGoal_<ContainerAllocator> Type;

  SickCameraGoal_()
    : trigger(0)  {
    }
  SickCameraGoal_(const ContainerAllocator& _alloc)
    : trigger(0)  {
  (void)_alloc;
    }



   typedef uint32_t _trigger_type;
  _trigger_type trigger;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(TRIG)
  #undef TRIG
#endif

  enum {
    TRIG = 0u,
  };


  typedef boost::shared_ptr< ::fetchit_challenge::SickCameraGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fetchit_challenge::SickCameraGoal_<ContainerAllocator> const> ConstPtr;

}; // struct SickCameraGoal_

typedef ::fetchit_challenge::SickCameraGoal_<std::allocator<void> > SickCameraGoal;

typedef boost::shared_ptr< ::fetchit_challenge::SickCameraGoal > SickCameraGoalPtr;
typedef boost::shared_ptr< ::fetchit_challenge::SickCameraGoal const> SickCameraGoalConstPtr;

// constants requiring out of line definition

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fetchit_challenge::SickCameraGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fetchit_challenge::SickCameraGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fetchit_challenge::SickCameraGoal_<ContainerAllocator1> & lhs, const ::fetchit_challenge::SickCameraGoal_<ContainerAllocator2> & rhs)
{
  return lhs.trigger == rhs.trigger;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fetchit_challenge::SickCameraGoal_<ContainerAllocator1> & lhs, const ::fetchit_challenge::SickCameraGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fetchit_challenge

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::fetchit_challenge::SickCameraGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fetchit_challenge::SickCameraGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fetchit_challenge::SickCameraGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fetchit_challenge::SickCameraGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fetchit_challenge::SickCameraGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fetchit_challenge::SickCameraGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fetchit_challenge::SickCameraGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a00eab466ee4a5a785a998c5366a7e21";
  }

  static const char* value(const ::fetchit_challenge::SickCameraGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa00eab466ee4a5a7ULL;
  static const uint64_t static_value2 = 0x85a998c5366a7e21ULL;
};

template<class ContainerAllocator>
struct DataType< ::fetchit_challenge::SickCameraGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fetchit_challenge/SickCameraGoal";
  }

  static const char* value(const ::fetchit_challenge::SickCameraGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fetchit_challenge::SickCameraGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"uint32 TRIG=0\n"
"uint32 trigger\n"
;
  }

  static const char* value(const ::fetchit_challenge::SickCameraGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fetchit_challenge::SickCameraGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.trigger);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SickCameraGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fetchit_challenge::SickCameraGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fetchit_challenge::SickCameraGoal_<ContainerAllocator>& v)
  {
    s << indent << "trigger: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.trigger);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FETCHIT_CHALLENGE_MESSAGE_SICKCAMERAGOAL_H
